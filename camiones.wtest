
import camion.*
import cosas.*

describe "test de camiones y cosas" {
  test "se agrega carga en el camion" {
    camion.cargar(knightRider)

    assert.equals(#{knightRider},camion.cosas())
  }

  test "se descarga una cosa del camion" {
    camion.cargar(knightRider)
    camion.descargar(knightRider)

    assert.equals(#{},camion.cosas())
  }

  test "el peso de cada uno de los objetos del camion es un numero par" {
    
    camion.cargar(knightRider)

    assert.that(camion.todoPesoPar())
  }

  test "el peso de uno de los objetos del camion  no es par" {
    arenaDeGranel.peso(11)
    camion.cargar(arenaDeGranel)

    assert.notThat(camion.todoPesoPar())
    
  }

  test "indica si hay alguna carga en el camion con el peso indicado" {
    
    camion.cargar(knightRider)

    assert.that(camion.hayAlgunoQuePesa(500))
  }

  test "indica si no hay una carga en el camion con el peso indicado" {
    
    camion.cargar(knightRider)

    assert.notThat(camion.hayAlgunoQuePesa(10))

  }

  test "devuelve el primer objeto cuyo nivel de peligrosidad es el indicado" {
    
    camion.cargar(knightRider)

    assert.equals(knightRider,camion.elDeNivel(10))
  }

  test "suma total del peso del camion  con su tara y su carga" {
    
    camion.cargar(knightRider)

    assert.equals(1500,camion.pesoTotal())
  }
  
  test "indica si el peso total es supetio al peso maximo" {
    
    camion.cargar(knightRider)

    assert.notThat(camion.excedidoDePeso())
  }

  test "indica si el peso total es superio al peso maximo (test exediendo el maximo)" {
    
    paqueteDeLadrillos.cantidadLadrillos(1000)
    camion.cargar(paqueteDeLadrillos)

    assert.that(camion.excedidoDePeso())
  }

  test "devuelve una coleccion con los objetos cargados que superan el nivel de peligrosidad indicado" {
    
    camion.cargar(knightRider)

    assert.equals(#{knightRider},camion.objetosQueSuperanPeligrosidad(5))
  }

  test "devuelve una coleccion con los objetos mas peligrosos que la cosa indicada" {
    
    camion.cargar(knightRider)

    assert.equals(#{},camion.objetosMasPeligrososQue(knightRider))
  }

  test "el camion puede circular si no esta excedido de peso y ninguno de los objetos cargados super el nivel maximo de peligrosidad inficado" {
    
    camion.cargar(knightRider)
    
    assert.that(camion.puedeCircularEnRuta(10))
  }

  test "indica si el peso de alguna de las cosas que tiene el cammion esta en el intervalo" {
    
    camion.cargar(knightRider)
    camion.cargar(bumblebee)
    bumblebee.transformacion(robot)
    camion.cargar(residuosRadioactivos)
    camion.cargar(bateriaAntiaerea)
    bateriaAntiaerea.misiles(true)
    
    assert.that(camion.tieneAlgoQuePesaEntre(0,800))

  }

  test "indica si el peso de alguna de las cosas que tiene el camion  no esta en el intervalo" {
    camion.cargar(knightRider)
    camion.cargar(bumblebee)
    bumblebee.transformacion(robot)
    residuosRadioactivos.peso(100)
    camion.cargar(residuosRadioactivos)
    camion.cargar(bateriaAntiaerea)
    bateriaAntiaerea.misiles(true)

    assert.notThat(camion.tieneAlgoQuePesaEntre(0,10))


  }

  test "devuelve la cosa mas pesada que tenga el camion" {
    
    camion.cargar(knightRider)
    camion.cargar(bumblebee)
    bumblebee.transformacion(robot)
    camion.cargar(residuosRadioactivos)
    camion.cargar(bateriaAntiaerea)
    bateriaAntiaerea.misiles(true)
    
    assert.equals(bumblebee,camion.cosaMasPesada())
  }

  test "devuelve una lista con los pesos de cada cosa que tiene el camion" {
    
    camion.cargar(knightRider)
    camion.cargar(bumblebee)
    bumblebee.transformacion(robot)
    camion.cargar(residuosRadioactivos)
    camion.cargar(bateriaAntiaerea)
    bateriaAntiaerea.misiles(true)

    assert.equals([500,800,15,300],camion.pesos())
  }

  test "suma la cantidad de bultos que tiene el camion " {
    
    camion.cargar(knightRider)
    camion.cargar(bumblebee)
    bumblebee.transformacion(robot)
    camion.cargar(residuosRadioactivos)
    camion.cargar(bateriaAntiaerea)
    bateriaAntiaerea.misiles(true)

    assert.equals(6,camion.totalBultos())
  }

  test "consecuencias de cargar en el camion arenaDegranel para bumblebee - se tranforma en robot" {

    camion.cargar(bumblebee)


    assert.equals(robot,bumblebee.transformacion())
    
  }

  test "consecuencia de carga por agrega paqueteDeLaDRillos - aumenta 12 ladrillos" {
    
    camion.cargar(paqueteDeLadrillos)

    assert.equals(12,paqueteDeLadrillos.cantidadLadrillos()) // consultar en clase

  }

  test "consecuencia de carga por agregar arenaDeGranel - aumenta 20 kilos" {
    
    camion.cargar(arenaDeGranel)

    assert.equals(arenaDeGranel.peso(), 20)

  }

  test "consecuencia de carga por agregar bateria antiaerea - carga misiles " {
    
    camion.cargar(bateriaAntiaerea)

    assert.that(bateriaAntiaerea.estaConMisiles())

  }

  test "consecuencia de cargar contenedor portuario -  hace reaccionar a cada una de las cosas que tiene dentro" {

   contenedorPortuario.cargar(arenaDeGranel) 
   camion.cargar(contenedorPortuario)
   

   assert.equals(20,arenaDeGranel.peso())
  }

  test "consecuencia de carga residuos radioactivos - agrega 15 kilos" {
    
    camion.cargar(residuosRadioactivos)

    assert.equals(15,residuosRadioactivos.peso())

  }

  test "el almacen tiene una capacidad maxima que no se puede superar. el almacen tiene arenaDeGranel 1 bulto y el camion a bumblebee y  knightRider, entonces no puede tranportar" {
    
    almacen.agregar(arenaDeGranel)
    camion.cargar(bumblebee)
    camion.cargar(knightRider)

    assert.that(almacen.capacidadMaximaReal() <= camion.totalBultos())

  }

  test "el camion va hacia el almacen  por el camino de ruta 9 y deja la carga " {
    
    camion.cargar(knightRider)
    camion.cargar(arenaDeGranel)
    camion.cargar(bumblebee)

    camion.transportar(almacen,ruta9)

    assert.equals(camion.cosas(), #{})
    assert.equals(almacen.cosasAlmacen(), #{knightRider,arenaDeGranel,bumblebee})


   
  }

  test "la peligrosidad de ruta 9 es de 11  entonces  el camion  con carga dada puede  utilizar el camino" {

    camion.cargar(knightRider)
    camion.cargar(arenaDeGranel)
    camion.cargar(bumblebee)

    assert.that(ruta9.puedeViajar(camion))

  }

  test "el peso maximo maximo de caminos vecinales es de 2500 (configurable) el camion puede utilizar el camino" {
    
    camion.cargar(knightRider)
    camion.cargar(arenaDeGranel)
    camion.cargar(bumblebee)

    assert.that(caminosVecinales.puedeViajar(camion))

  }

  test "excepcion donde el camion no puede llegar al almacen por exceso de peso" {
    
   
    camion.cargar(knightRider)
    camion.cargar(arenaDeGranel)
    camion.cargar(bumblebee)
    paqueteDeLadrillos.cantidadLadrillos(2000)
    
    

    assert.throwsException({camion.validacionTransporte(almacen,caminosVecinales)})

  }

  test "excepcion donde  los bultos del camion superan a la capacidad del almacen" {
    almacen.agregar(bateriaAntiaerea)
    camion.cargar(knightRider)
    camion.cargar(arenaDeGranel)
    camion.cargar(bumblebee)

    assert.throwsException({ camion.validacionTransporte(almacen,ruta9) })
    
  }

  test "excepcion donde el nivel de peligrosidad de la carga del camion supera al maximo de ruta9"{

    camion.cargar(knightRider)
    camion.cargar(arenaDeGranel)
    camion.cargar(bumblebee)

    assert.throwsException({ camion.validacionTransporte(almacen,ruta9) })

  }

  
}